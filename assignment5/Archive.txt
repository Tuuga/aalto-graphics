// Triangle intersection
// compute plane's normal
	auto v0 = vertices_[0];
	auto v1 = vertices_[1];
	auto v2 = vertices_[2];

	Vec3f v0v1 = v1 - v0;
	Vec3f v0v2 = v2 - v0;
	// no need to normalize
	Vec3f N = v0v1.cross(v0v2); // N 
	float denom = N.dot(N);

	// Step 1: finding P

	// check if ray and plane are parallel ?
	float NdotRayDirection = N.dot(r.direction);
	if (fabs(NdotRayDirection) < FLT_EPSILON) // almost 0 
		return false; // they are parallel so they don't intersect ! 

	// compute d parameter using equation 2
	float d = N.dot(v0);

	// compute t (equation 3)
	auto t = (N.dot(r.origin) + d) / NdotRayDirection;
	// check if the triangle is in behind the ray
	if (t < tmin || t > h.t) return false; // the triangle is behind 

							 // compute the intersection point using equation 1
	Vec3f P = r.origin + t * r.direction;

	// Step 2: inside-outside test
	Vec3f C; // vector perpendicular to triangle's plane 

	// edge 0
	Vec3f edge0 = v1 - v0;
	Vec3f vp0 = P - v0;
	C = edge0.cross(vp0);
	if (N.dot(C) < 0) return false; // P is on the right side 

	// edge 1
	Vec3f edge1 = v2 - v1;
	Vec3f vp1 = P - v1;
	C = edge1.cross(vp1);
	float u, v;
	if ((u = N.dot(C)) < 0)  return false; // P is on the right side 

	// edge 2
	Vec3f edge2 = v0 - v2;
	Vec3f vp2 = P - v2;
	C = edge2.cross(vp2);
	if ((v = N.dot(C)) < 0) return false; // P is on the right side;

	u /= denom;
	v /= denom;

	//h.normal = N.normalized();
	h.normal = -r.direction.normalized();
	h.t = t;
	h.material = material_;


	return true; // this ray hits the triangle